const mongoose = require('mongoose');

const categorySchema = new mongoose.Schema(
  {
    category: {
      type: String,
      enum: [
        'AI-ethics',
        'FPGA-design',
        'NFTs',
        'NoSQL',
        'ORM',
        'PLC-programming',
        'RESTful-architecture',
        'SQL',
        'SOLID-principles',
        'Agreement',
        'Algorithm',
        'Authentication',
        'Backend',
        'Big-data',
        'Blockchain',
        'Blockchain-platforms',
        'Cloud-computing',
        'Cloud-architecture',
        'Cloud-security',
        'Computer-vision',
        'Concurrency',
        'Container-orchestration',
        'Continuous-deployment',
        'Continuous-integration',
        'Cryptocurrency',
        'Cross-platform',
        'Cross-platform-development',
        'Cybersecurity',
        'Data-analytics',
        'Data-cleaning',
        'Data-engineering',
        'Data-preprocessing',
        'Data-science',
        'Data-structures',
        'Database',
        'Database-design',
        'Declarative-programming',
        'Deep-learning',
        'Design-patterns',
        'Design-principles',
        'Desktop',
        'Devops',
        'Distributed-systems',
        'Encryption',
        'Embedded-firmware',
        'Embedded-systems',
        'End-to-end-testing',
        'Error-handling',
        'Event-driven-architecture',
        'Feature-engineering',
        'Frontend',
        'Frameworks',
        'Full-stack',
        'Functional-programming',
        'Game-development',
        'Game-engine',
        'Graphics-programming',
        'Hardware',
        'Hardware-design',
        'Imperative-programming',
        'Integration-testing',
        'Internet-of-things',
        'IoT',
        'Libraries',
        'Logging',
        'Machine-learning',
        'Microcontroller-programming',
        'Microservices',
        'Mobile',
        'Mobile-development',
        'Mobile-frameworks',
        'Model-deployment',
        'Model-evaluation',
        'Model-training',
        'Monitoring',
        'Native-apps',
        'Natural-language-processing',
        'Networking',
        'Operating-systems',
        'Orm',
        'Parallel-computing',
        'Performance-testing',
        'Progressive-web-apps',
        'Rating',
        'Reactive-programming',
        'Real-time',
        'Responsive-design',
        'Robotics',
        'Scripting',
        'Search-algorithms',
        'Secure-coding',
        'Security',
        'Serverless',
        'Software',
        'Software-architecture',
        'Sorting-algorithms',
        'Smart-contracts',
        'Sql',
        'Test-automation',
        'Testing',
        'Tools',
        'UI/UX-design',
        'Unit-testing',
        'User-experience',
        'User-interface',
        'Virtual-reality',
        'Virtualization',
        'Web',
        'Web-development',
        'Web-frameworks',
        'Web3',
        'Other',
        'All'
      ],

      default: 'All'
    },
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true
    },
    username: String,
    bugReport: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'BugReport'
    },
    bugFix: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'UserAttempt'
    },
    reusableCode: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'ReusableCode'
    },
    blogPost: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Blog'
    },
    timestamp: {
      type: Date,
      default: Date.now()
    }
  },
  {
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
  }
);

const Category = mongoose.model('Category', categorySchema);

module.exports = Category;
